package my_api.servlet.filter;
// **********************************************************************
// Code generated by AlchemyJ Compiler.
// PLEASE DO NOT EDIT THIS FILE.
// **********************************************************************

import com.axisoft.alchemyj.execution.common.context.AlchemyjExecutionThreadContextHolder;
import java.io.IOException;
import javax.servlet.FilterChain;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.springframework.boot.web.servlet.FilterRegistrationBean;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.web.filter.CharacterEncodingFilter;
import org.springframework.web.filter.OncePerRequestFilter;
import org.springframework.web.util.ContentCachingRequestWrapper;

@Configuration
public class ServletFilterConfiguration {

  @Bean
  public FilterRegistrationBean<OncePerRequestFilter> getCharacterEncodingFilterRegisterBean() {
    FilterRegistrationBean<OncePerRequestFilter> registration = new FilterRegistrationBean<>();
    CharacterEncodingFilter characterEncodingFilter = new CharacterEncodingFilter();
    characterEncodingFilter.setEncoding("UTF-8");
    characterEncodingFilter.setForceEncoding(true);
    characterEncodingFilter.setForceRequestEncoding(true);
    characterEncodingFilter.setForceResponseEncoding(true);
    registration.setFilter(characterEncodingFilter);
    registration.addUrlPatterns("/*");
    registration.setName("characterEncodingFilter");
    registration.setOrder(Integer.MIN_VALUE);
    return registration;
  }

  @Bean
  public FilterRegistrationBean<OncePerRequestFilter> getWrapRequestFilterRegisterBean() {
    FilterRegistrationBean<OncePerRequestFilter> registration = new FilterRegistrationBean<>();
    registration.setFilter(
        new OncePerRequestFilter() {
          @Override
          protected void doFilterInternal(
              HttpServletRequest request, HttpServletResponse response, FilterChain filterChain)
              throws ServletException, IOException {
            filterChain.doFilter(new ContentCachingRequestWrapper(request), response);
          }
        });
    registration.addUrlPatterns("/*");
    registration.setName("wrapRequestFilter");
    registration.setOrder(Integer.MIN_VALUE + 1);
    return registration;
  }

  @Bean
  public FilterRegistrationBean<OncePerRequestFilter> getCmdFileScannerFilterRegisterBean() {
    FilterRegistrationBean<OncePerRequestFilter> registration = new FilterRegistrationBean<>();
    registration.setFilter(
        new OncePerRequestFilter() {
          @Override
          protected void doFilterInternal(
              HttpServletRequest request, HttpServletResponse response, FilterChain filterChain)
              throws ServletException, IOException {
            AlchemyjExecutionThreadContextHolder.getInstance()
                .registerCurrentExecutionArtifactId("MyRESTAPI");
            filterChain.doFilter(request, response);
          }
        });
    registration.addUrlPatterns("/*");
    registration.setName("cmdFileScanningFilter");
    registration.setOrder(Integer.MIN_VALUE + 2);
    return registration;
  }

  @Bean
  public FilterRegistrationBean<ExceptionHandlingFilter> getExceptionFilterRegisterBean() {
    FilterRegistrationBean<ExceptionHandlingFilter> registration = new FilterRegistrationBean<>();
    registration.setFilter(new ExceptionHandlingFilter());
    registration.addUrlPatterns("/*");
    registration.setName("exceptionHandlingFilter");
    registration.setOrder(Integer.MIN_VALUE + 3);
    return registration;
  }
}
