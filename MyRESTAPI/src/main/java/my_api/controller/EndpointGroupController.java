package my_api.controller;
// **********************************************************************
// Code generated by AlchemyJ Compiler.
// PLEASE DO NOT EDIT THIS FILE.
// **********************************************************************

import com.axisoft.alchemyj.execution.api.executor.WorkbookExecutor;
import com.axisoft.alchemyj.execution.common.context.AlchemyjExecutionThreadContextHolder;
import com.axisoft.alchemyj.execution.common.exception.AlchemyjFormulaExecutionException;
import io.swagger.annotations.ApiImplicitParam;
import io.swagger.annotations.ApiImplicitParams;
import io.swagger.annotations.ApiOperation;
import io.swagger.annotations.ApiResponse;
import io.swagger.annotations.ApiResponses;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import lombok.extern.slf4j.Slf4j;
import my_api.entity.Output;
import my_api.service.EndpointGroupService;
import my_api.util.AdditionalInfoResponseUtils;
import my_api.util.AuthenticationUtils;
import my_api.util.EndPointExecutionUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

@RestController
@RequestMapping(value = "/endpointGroup")
@Slf4j
public class EndpointGroupController {

  @Autowired private AdditionalInfoResponseUtils additionalInfoResponseUtils;

  @Autowired private EndPointExecutionUtils endPointExecutionUtils;

  @Autowired private EndpointGroupService endpointGroupService;

  @Autowired private AuthenticationUtils authenticationUtils;

  private String identifier = "EndpointGroup";

  @ApiOperation(produces = MediaType.APPLICATION_JSON_UTF8_VALUE, value = "Function Point 1")
  @ApiImplicitParams(
      value = {
        @ApiImplicitParam(name = "input_parameter_1", dataType = "String", required = false)
      })
  @ApiResponses(value = {@ApiResponse(code = 200, message = "OK")})
  @RequestMapping(value = "/resource1", method = RequestMethod.GET)
  public ResponseEntity<Output> handleFunctionPoint(
      @RequestParam(required = false, value = "input_parameter_1") String inputparameter10,
      HttpServletRequest request,
      HttpServletResponse response)
      throws AlchemyjFormulaExecutionException {

    String functionPointName = "Function Point 1";
    log.info("Start to handled api, function point name: {}", functionPointName);
    WorkbookExecutor wbExecutor = null;

    try {
      AlchemyjExecutionThreadContextHolder.getInstance()
          .registerCurrentExecutionFunPoint(functionPointName);

      wbExecutor =
          this.endPointExecutionUtils.getEndPointWorkbookExecutorByWorkbookName(identifier);

      // Set function point to Workbook
      this.endPointExecutionUtils.setFunctionPoint(wbExecutor, functionPointName);
      this.authenticationUtils.cleanAuthorityInfoInWorkbook(wbExecutor);

      // Handle Full Set Parameter
      // trigger service
      Output alResult =
          this.endpointGroupService.handleFunctionPoint(
              functionPointName, inputparameter10, wbExecutor);

      alResult.setAdditionInfoResponse(this.additionalInfoResponseUtils.success(request));

      // Handle Response operation

      log.info("Finish to handled api, function point name: {}", functionPointName);
      return ResponseEntity.ok(alResult);
    } catch (Exception ex) {
      throw ex;
    } finally {
      if (wbExecutor != null) {
        wbExecutor.close();
      }
    }
  }
}
