package my_api.configuration.application.listener;
// **********************************************************************
// Code generated by AlchemyJ Compiler.
// PLEASE DO NOT EDIT THIS FILE.
// **********************************************************************

import java.nio.file.Paths;
import java.util.List;
import my_api.util.SpringInitializerLogger;
import org.springframework.boot.context.event.ApplicationEnvironmentPreparedEvent;
import org.springframework.boot.env.YamlPropertySourceLoader;
import org.springframework.context.ApplicationEvent;
import org.springframework.context.event.SmartApplicationListener;
import org.springframework.core.Ordered;
import org.springframework.core.env.MutablePropertySources;
import org.springframework.core.env.PropertySource;
import org.springframework.core.io.FileSystemResource;
import org.springframework.util.StringUtils;

public class ExternalYamlConfigApplicationListener implements SmartApplicationListener, Ordered {

  private static SpringInitializerLogger log = SpringInitializerLogger.getInstance();

  private static final String EXTERNAL_CONFIG_FILE_LOCATION = "";

  private static final String EXTERNAL_CONFIG_FILE_LOCATION_ENVIRONMENT_VARIABLE_NAME = "";

  private boolean hasLoaded = false;

  @Override
  public int getOrder() {
    return Ordered.HIGHEST_PRECEDENCE;
  }

  @Override
  public boolean supportsSourceType(Class<?> arg0) {
    return true;
  }

  @Override
  public boolean supportsEventType(Class<? extends ApplicationEvent> eventType) {
    return ApplicationEnvironmentPreparedEvent.class.isAssignableFrom(eventType);
  }

  @Override
  public void onApplicationEvent(ApplicationEvent event) {
    if (event instanceof ApplicationEnvironmentPreparedEvent) {
      this.onApplicationEnvironmentPreparedEvent((ApplicationEnvironmentPreparedEvent) event);
    }
  }

  public void onApplicationEnvironmentPreparedEvent(ApplicationEnvironmentPreparedEvent event) {
    log.info("Start to load External YAML File");
    this.loadByEnvironmentVariable(event);
    if (!this.hasLoaded) {
      this.loadByPredefinedFileLocation(event);
    }
    if (!this.hasLoaded) {
      log.info("Not load any external configuration yaml configuration...");
    }
  }

  private void loadConfigByPath(String filePath, ApplicationEnvironmentPreparedEvent event) {
    try {
      MutablePropertySources mutablePs = event.getEnvironment().getPropertySources();
      List<PropertySource<?>> pss =
          new YamlPropertySourceLoader()
              .load("ALCHEMYJ_EXT_CONFIG", new FileSystemResource(filePath));
      if (pss != null) {
        pss.stream()
            .forEach(
                ps -> {
                  log.debug("External configuration loaded, details: {}", ps);
                  mutablePs.addFirst(ps);
                });
      }
      this.hasLoaded = true;
      log.info("Finish to load External YAML File: {}", filePath);
    } catch (Exception ex) {
      log.warn(
          "Failed to load external configuration file({}), details: {}", filePath, ex.getMessage());
      log.warn(ex.getMessage(), ex);
      // Skip Error
    }
  }

  private void loadByPredefinedFileLocation(ApplicationEnvironmentPreparedEvent event) {
    if (StringUtils.isEmpty(EXTERNAL_CONFIG_FILE_LOCATION)) {
      log.info("Not static external configuration yaml location defined");
      return;
    }
    String actuallyExtYamlFilePath = this.calculatePath(EXTERNAL_CONFIG_FILE_LOCATION);
    log.info(
        "Configured (by pre-defined static location) external configuration yaml file location: {}, absolute path: {}",
        EXTERNAL_CONFIG_FILE_LOCATION,
        actuallyExtYamlFilePath);
    if (!this.checkFileExist(actuallyExtYamlFilePath)) {
      log.info(
          "Configured (by pre-defined static location) external configuration yaml file location does not exist, path: {}",
          actuallyExtYamlFilePath);
      return;
    }
    this.loadConfigByPath(actuallyExtYamlFilePath, event);
  }

  private void loadByEnvironmentVariable(ApplicationEnvironmentPreparedEvent event) {
    if (StringUtils.isEmpty(EXTERNAL_CONFIG_FILE_LOCATION_ENVIRONMENT_VARIABLE_NAME)) {
      log.info("Not defined external configuration yaml file environment variable name");
      return;
    }
    String externalYamlFilePath =
        event.getEnvironment().getProperty(EXTERNAL_CONFIG_FILE_LOCATION_ENVIRONMENT_VARIABLE_NAME);
    String actuallyExtYamlFilePath =
        StringUtils.isEmpty(externalYamlFilePath) ? null : this.calculatePath(externalYamlFilePath);
    log.info(
        "Configured (by environment variable) external configuration yaml file location: {}, absolute path: {}",
        externalYamlFilePath,
        actuallyExtYamlFilePath);
    if (!this.checkFileExist(actuallyExtYamlFilePath)) {
      log.info(
          "Configured (by environment variable) external configuration yaml file location does not exist, path: {}",
          actuallyExtYamlFilePath);
      return;
    }
    this.loadConfigByPath(actuallyExtYamlFilePath, event);
  }

  private boolean checkFileExist(String path) {
    return !StringUtils.isEmpty(path)
        && Paths.get(path).toFile().exists()
        && Paths.get(path).toFile().isFile();
  }

  private String calculatePath(String sourcePath) {
    try {
      return Paths.get(sourcePath).toFile().getCanonicalPath();
    } catch (Exception e) {
      return Paths.get(sourcePath).toFile().getAbsolutePath();
    }
  }
}
