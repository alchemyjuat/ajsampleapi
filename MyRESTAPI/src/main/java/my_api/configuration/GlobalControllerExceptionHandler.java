package my_api.configuration;
// **********************************************************************
// Code generated by AlchemyJ Compiler.
// PLEASE DO NOT EDIT THIS FILE.
// **********************************************************************

import com.axisoft.alchemyj.execution.api.entity.RestApiAdditionInfoResponse;
import com.axisoft.alchemyj.execution.common.exception.AlchemyjException;
import com.axisoft.alchemyj.execution.common.exception.AlchemyjFormulaExecutionException;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.stream.Collectors;
import javax.servlet.http.HttpServletRequest;
import lombok.extern.slf4j.Slf4j;
import my_api.entity.base.AlchemyjResource;
import my_api.util.AdditionalInfoResponseUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.web.bind.ServletRequestBindingException;
import org.springframework.web.bind.annotation.ExceptionHandler;
import org.springframework.web.bind.annotation.ResponseStatus;
import org.springframework.web.bind.annotation.RestControllerAdvice;
import org.springframework.web.servlet.NoHandlerFoundException;

@RestControllerAdvice
@Slf4j
public class GlobalControllerExceptionHandler {

  @Autowired private AdditionalInfoResponseUtils additionalInfoResponseUtils;

  @ExceptionHandler(value = {NoHandlerFoundException.class})
  @ResponseStatus(value = HttpStatus.NOT_FOUND)
  public AlchemyjResource handleResourceNotFound(HttpServletRequest request, Exception ex) {
    log.error(String.format("Exception throws on URL %s", request.getRequestURI()), ex);
    List<String> messages = new ArrayList<>();
    messages.add("Resource not found.");

    AlchemyjResource result = new AlchemyjResource();
    result.setAdditionInfoResponse(
        this.additionalInfoResponseUtils.notFoundException(request, messages));
    return result;
  }

  @ExceptionHandler(value = {Exception.class, RuntimeException.class})
  @ResponseStatus(HttpStatus.INTERNAL_SERVER_ERROR)
  public AlchemyjResource handleException(HttpServletRequest request, Exception ex) {
    log.error(String.format("Exception throws on URL %s", request.getRequestURI()), ex);
    List<String> messages = new ArrayList<>();
    messages.add("Internal Server Error");

    AlchemyjResource result = new AlchemyjResource();
    result.setAdditionInfoResponse(
        this.additionalInfoResponseUtils.unexpectException(request, messages));
    return result;
  }

  @ExceptionHandler(AlchemyjException.class)
  @ResponseStatus(HttpStatus.INTERNAL_SERVER_ERROR)
  public AlchemyjResource handleAlchemyjException(HttpServletRequest request, Exception ex) {
    log.error(String.format("AlchemyJ Exception throws on URL %s", request.getRequestURI()), ex);
    List<String> messages = new ArrayList<>();
    messages.add("Internal Server AlchemyJ Error");

    AlchemyjResource result = new AlchemyjResource();
    result.setAdditionInfoResponse(
        this.additionalInfoResponseUtils.unexpectException(request, messages));
    return result;
  }

  @ExceptionHandler(AlchemyjFormulaExecutionException.class)
  @ResponseStatus(HttpStatus.INTERNAL_SERVER_ERROR)
  public AlchemyjResource handleAlchemyjPredefinedException(
      HttpServletRequest request, Exception ex) {
    AlchemyjFormulaExecutionException afee = (AlchemyjFormulaExecutionException) ex;
    log.error(
        String.format(
            "AlchemyJ formula execution Exception throws on URL %s, [formula errors: %s, user raise errors: %s]",
            request.getRequestURI(), afee.getFormulaErrors(), afee.getUserRaiseErrors()),
        ex);
    AlchemyjResource result = new AlchemyjResource();

    if (afee.getUserRaiseErrors() == null || afee.getUserRaiseErrors().isEmpty()) {
      List<String> messages = new ArrayList<>();
      messages.add("Internal Server AlchemyJ Execution Error");
      result.setAdditionInfoResponse(
          this.additionalInfoResponseUtils.unexpectException(request, messages));
    } else {
      List<String> messages =
          afee.getUserRaiseErrors().stream()
              .map(me -> me.getErrorMsg())
              .collect(Collectors.toList());
      List<String> errorCodes =
          afee.getUserRaiseErrors().stream()
              .map(me -> me.getErrorCode())
              .collect(Collectors.toList());
      result.setAdditionInfoResponse(
          this.additionalInfoResponseUtils.userRaiseException(request, messages, errorCodes));
    }
    return result;
  }

  @ExceptionHandler(ServletRequestBindingException.class)
  @ResponseStatus(HttpStatus.BAD_REQUEST)
  public AlchemyjResource handleRequestBindingException(HttpServletRequest request, Exception ex) {
    AlchemyjResource result = new AlchemyjResource();
    String uri = request.getRequestURI();
    List<String> messages = new ArrayList<>();
    messages.add(ex.getMessage());
    result.setAdditionInfoResponse(
        new RestApiAdditionInfoResponse(
            HttpStatus.BAD_REQUEST.value(), new Date(), uri, messages, null));
    return result;
  }
}
