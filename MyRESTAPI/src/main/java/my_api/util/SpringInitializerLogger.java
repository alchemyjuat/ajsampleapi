package my_api.util;
// **********************************************************************
// Code generated by AlchemyJ Compiler.
// PLEASE DO NOT EDIT THIS FILE.
// **********************************************************************

import java.util.ArrayList;
import java.util.List;
import lombok.AllArgsConstructor;
import lombok.Data;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class SpringInitializerLogger {

  private List<InitialLogHolder> initialLogHolders = new ArrayList<>();

  private SpringInitializerLogger() {}

  private static final class LazyHolder {
    private static final SpringInitializerLogger INSTANCE = new SpringInitializerLogger();
  }

  public static SpringInitializerLogger getInstance() {
    return LazyHolder.INSTANCE;
  }

  public void trace(String format, Object... arguments) {
    String clazzName = Thread.currentThread().getStackTrace()[2].getClassName();
    initialLogHolders.add(new InitialLogHolder(0, clazzName, format, arguments, null));
  }

  public void debug(String format, Object... arguments) {
    String clazzName = Thread.currentThread().getStackTrace()[2].getClassName();
    initialLogHolders.add(new InitialLogHolder(1, clazzName, format, arguments, null));
  }

  public void info(String format, Object... arguments) {
    String clazzName = Thread.currentThread().getStackTrace()[2].getClassName();
    initialLogHolders.add(new InitialLogHolder(2, clazzName, format, arguments, null));
  }

  public void warn(String format, Object... arguments) {
    String clazzName = Thread.currentThread().getStackTrace()[2].getClassName();
    initialLogHolders.add(new InitialLogHolder(3, clazzName, format, arguments, null));
  }

  public void error(String format, Object... arguments) {
    String clazzName = Thread.currentThread().getStackTrace()[2].getClassName();
    initialLogHolders.add(new InitialLogHolder(4, clazzName, format, arguments, null));
  }

  public void error(String msg, Throwable ex) {
    String clazzName = Thread.currentThread().getStackTrace()[2].getClassName();
    initialLogHolders.add(new InitialLogHolder(5, clazzName, msg, null, ex));
  }

  public void afterSpringEnvInitializer() {
    initialLogHolders.forEach(
        logHolder -> {
          Logger log = LoggerFactory.getLogger(logHolder.getLoggerClassName());
          if (logHolder.getType() == 0) {
            log.trace(logHolder.getMsgformat(), logHolder.getArguments());
          } else if (logHolder.getType() == 1) {
            log.debug(logHolder.getMsgformat(), logHolder.getArguments());
          } else if (logHolder.getType() == 2) {
            log.info(logHolder.getMsgformat(), logHolder.getArguments());
          } else if (logHolder.getType() == 3) {
            log.warn(logHolder.getMsgformat(), logHolder.getArguments());
          } else if (logHolder.getType() == 4) {
            log.error(logHolder.getMsgformat(), logHolder.getArguments());
          } else if (logHolder.getType() == 5) {
            log.error(logHolder.getMsgformat(), logHolder.getEx());
          }
        });
    // clear log...
    initialLogHolders.clear();
  }
}

@Data
@AllArgsConstructor
class InitialLogHolder {
  private Integer type;
  private String loggerClassName;
  private String msgformat;
  private Object[] arguments;
  private Throwable ex;
}
