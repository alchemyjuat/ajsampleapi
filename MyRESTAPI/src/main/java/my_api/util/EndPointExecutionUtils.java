package my_api.util;
// **********************************************************************
// Code generated by AlchemyJ Compiler.
// PLEASE DO NOT EDIT THIS FILE.
// **********************************************************************

import com.axisoft.alchemyj.execution.api.context.AlchemyjClassContextHolder;
import com.axisoft.alchemyj.execution.api.executor.WorkbookExecutor;
import com.axisoft.alchemyj.execution.common.exception.AlchemyjException;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import java.util.Enumeration;
import java.util.LinkedHashMap;
import java.util.Map;
import javax.servlet.http.Cookie;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import lombok.extern.slf4j.Slf4j;
import my_api.Constants;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Scope;
import org.springframework.stereotype.Component;
import org.springframework.web.util.WebUtils;

@Component
@Scope("singleton")
@Slf4j
public class EndPointExecutionUtils {

  @Autowired private ObjectMapper objectMapper;

  /**
   * Get workbook executor for end point execution by workbook name
   *
   * @param workbookName Workbook name
   * @return Workbook executor
   */
  public WorkbookExecutor getEndPointWorkbookExecutorByWorkbookName(String workbookName) {
    return AlchemyjClassContextHolder.getInstance()
        .getWorkbookExecutor(
            String.format(Constants.ALCHEMYJ_FILE_PATH_STR_TEMPLATE, workbookName));
  }

  /**
   * Set end point id to workbook executor handle's workbook
   *
   * @param wbExecutor Workbook Executor
   * @param functionPoint End Point ID
   */
  public void setFunctionPoint(WorkbookExecutor wbExecutor, String functionPoint) {
    log.info("Setting function point [{}] to workbook.", functionPoint);
    wbExecutor.setSingleValToNameAddress(Constants.FUNCTION_POINT_SETTER_WB_NAME, functionPoint);
  }

  /**
   * Set Full Set Request Query Parameter to Workbook
   *
   * @param functionPointName current execution function point name
   * @param wbExecutor workbook executor object
   * @param sheetName Setter sheet name
   * @param startRowIndex Setter start row index
   * @param startColIndex Setter start column index
   * @param endRowIndex Setter end row index
   * @param endColIndex Setter end column index
   * @param request Http Servlet Request
   */
  public void setFullSetRequestQueryParameters(
      String functionPointName,
      WorkbookExecutor wbExecutor,
      String sheetName,
      int startRowIndex,
      int startColIndex,
      int endRowIndex,
      int endColIndex,
      HttpServletRequest request) {
    try {
      log.info(
          "Function point [{}]: Setting full set request query address to workbook [sheetName: {}, startRowIndex: {}, startColIndex: {}, endRowIndex: {}, endColIndex: {}]",
          functionPointName,
          sheetName,
          startRowIndex,
          startColIndex,
          endRowIndex,
          endColIndex);
      String requestFullParamJsonStr = this.getFullSetRequestFullSetParameterJsonStr(request);
      wbExecutor.setVal(
          sheetName,
          startRowIndex,
          startColIndex,
          endRowIndex,
          endColIndex,
          requestFullParamJsonStr);
    } catch (JsonProcessingException ex) {
      String msg =
          String.format(
              "Function point:[%s] Failed on convert request query parameter map to json string",
              functionPointName);
      log.error("Request parameter map: {}", request.getParameterMap());
      throw new AlchemyjException(msg, ex);
    }
  }

  /**
   * Set Full Set request header parameters to workbook
   *
   * @param functionPointName current execution function point name
   * @param wbExecutor workbook executor object
   * @param sheetName Setter sheet name
   * @param startRowIndex Setter start row index
   * @param startColIndex Setter start column index
   * @param endRowIndex Setter end row index
   * @param endColIndex Setter end column index
   * @param request Http Servlet Request
   */
  public void setFullSetRequestHeaderParameters(
      String functionPointName,
      WorkbookExecutor wbExecutor,
      String sheetName,
      int startRowIndex,
      int startColIndex,
      int endRowIndex,
      int endColIndex,
      HttpServletRequest request) {
    try {
      log.info(
          "Function point {}: Setting full set request header information to workbook [sheetName: {}, startRowIndex: {}, startColIndex: {}, endRowIndex: {}, endColIndex: {}]",
          functionPointName,
          sheetName,
          startRowIndex,
          startColIndex,
          endRowIndex,
          endColIndex);
      wbExecutor.setVal(
          sheetName,
          startRowIndex,
          startColIndex,
          endRowIndex,
          endColIndex,
          this.getFullSetRequestHeaderJsonStr(request));
    } catch (JsonProcessingException ex) {
      String msg =
          String.format(
              "Function point %s: Failed to convert all Request Header parameter to json string",
              functionPointName);
      throw new AlchemyjException(msg, ex);
    }
  }

  public void setToResponseHeader(
      String functionPointName,
      WorkbookExecutor wbExecutor,
      HttpServletResponse response,
      String parameterName,
      String sheetName,
      Integer startRowIndex,
      Integer startColIndex,
      Integer endRowIndex,
      Integer endColIndex) {
    log.debug(
        "Function point {}: setting to response header [key: {}] from workbook [{},{},{},{},{}]",
        functionPointName,
        parameterName,
        sheetName,
        startRowIndex,
        startColIndex,
        endRowIndex,
        endColIndex);
    try {
      String toBeSetterVal =
          wbExecutor.getValueAs2dArrayToString(
              sheetName, startRowIndex, startColIndex, endRowIndex, endColIndex);
      log.debug(
          "Function point {}: set value {} to response header, key: {}",
          functionPointName,
          toBeSetterVal,
          parameterName);
      response.addHeader(parameterName, toBeSetterVal);
      log.debug(
          "Function point {}: Finish setting to response header [key: {}] from workbook [{},{},{},{},{}]",
          functionPointName,
          parameterName,
          sheetName,
          startRowIndex,
          startColIndex,
          endRowIndex,
          endColIndex);
    } catch (Exception ex) {
      String msg =
          String.format(
              "Function point %s: failed to set value to response header [key: %s]",
              functionPointName, parameterName);
      throw ex;
    }
  }

  public void setToSession(
      String functionPointName,
      WorkbookExecutor wbExecutor,
      HttpServletRequest request,
      String parameterName,
      String sheetName,
      Integer startRowIndex,
      Integer startColIndex,
      Integer endRowIndex,
      Integer endColIndex) {
    log.debug(
        "Function point {}: setting to session [key: {}] from workbook [{},{},{},{},{}]",
        functionPointName,
        parameterName,
        sheetName,
        startRowIndex,
        startColIndex,
        endRowIndex,
        endColIndex);
    try {
      String toBeSetterVal =
          wbExecutor.getValueAs2dArrayToString(
              sheetName, startRowIndex, startColIndex, endRowIndex, endColIndex);
      log.debug(
          "Function point {}: set value {} to session, key: {}",
          functionPointName,
          toBeSetterVal,
          parameterName);
      WebUtils.setSessionAttribute(request, parameterName, toBeSetterVal);
      log.debug(
          "Function point {}: Finish setting to session [key: {}] from workbook [{},{},{},{},{}]",
          functionPointName,
          parameterName,
          sheetName,
          startRowIndex,
          startColIndex,
          endRowIndex,
          endColIndex);
    } catch (Exception ex) {
      String msg =
          String.format(
              "Function point %s: failed to set value to session [key: %s]",
              functionPointName, parameterName);
      throw ex;
    }
  }

  public void setToCookie(
      String functionPointName,
      WorkbookExecutor wbExecutor,
      HttpServletRequest request,
      HttpServletResponse response,
      String parameterName,
      String sheetName,
      Integer startRowIndex,
      Integer startColIndex,
      Integer endRowIndex,
      Integer endColIndex) {
    log.debug(
        "Function point {}: setting to cookie [key: {}] from workbook [{},{},{},{},{}]",
        functionPointName,
        parameterName,
        sheetName,
        startRowIndex,
        startColIndex,
        endRowIndex,
        endColIndex);
    try {
      String toBeSetterVal =
          wbExecutor.getValueAs2dArrayToString(
              sheetName, startRowIndex, startColIndex, endRowIndex, endColIndex);
      log.debug(
          "Function point {}: set value {} to cookie, key: {}",
          functionPointName,
          toBeSetterVal,
          parameterName);
      Cookie cookie = new Cookie(parameterName, toBeSetterVal);
      cookie.setSecure(false);
      cookie.setPath(request.getContextPath() + "/");
      response.addCookie(cookie);
      log.debug(
          "Function point {}: Finish setting to cookie [key: {}] from workbook [{},{},{},{},{}]",
          functionPointName,
          parameterName,
          sheetName,
          startRowIndex,
          startColIndex,
          endRowIndex,
          endColIndex);
    } catch (Exception ex) {
      String msg =
          String.format(
              "Function point %s: failed to set value to cookie [key: %s]",
              functionPointName, parameterName);
      throw ex;
    }
  }

  private String getFullSetRequestHeaderJsonStr(HttpServletRequest request)
      throws JsonProcessingException {
    Map<String, Object> headerDataMap = new LinkedHashMap<>();
    Enumeration<String> headerNameEnum = request.getHeaderNames();
    while (headerNameEnum.hasMoreElements()) {
      String headerName = headerNameEnum.nextElement();
      headerDataMap.put(headerName, request.getHeader(headerName));
    }
    return objectMapper.writeValueAsString(headerDataMap);
  }

  private String getFullSetRequestFullSetParameterJsonStr(HttpServletRequest request)
      throws JsonProcessingException {
    return objectMapper.writeValueAsString(request.getParameterMap());
  }
}
