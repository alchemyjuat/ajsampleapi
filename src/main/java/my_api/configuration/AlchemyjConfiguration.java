package my_api.configuration;
// **********************************************************************
// Code generated by AlchemyJ Compiler.
// PLEASE DO NOT EDIT THIS FILE.
// **********************************************************************

import com.axisoft.alchemyj.execution.api.context.AlchemyjClassContextHolder;
import com.axisoft.alchemyj.execution.api.executor.WorkbookExecutorInitPropertyHolder;
import com.fasterxml.jackson.databind.ObjectMapper;
import java.util.ArrayList;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import lombok.extern.slf4j.Slf4j;
import my_api.Constants;
import org.springframework.beans.factory.DisposableBean;
import org.springframework.beans.factory.InitializingBean;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Configuration;

@Configuration
@Slf4j
public class AlchemyjConfiguration implements InitializingBean, DisposableBean {
  private final AlchemyjProperties alchemyjProperties;

  private final ObjectMapper objectMapper;

  @Autowired
  public AlchemyjConfiguration(AlchemyjProperties alchemyjProperties, ObjectMapper objectMapper) {
    this.alchemyjProperties = alchemyjProperties;
    this.objectMapper = objectMapper;
  }

  @Override
  public void destroy() throws Exception {
    log.info("---Destroy AlchemyJ class context holder---");
    AlchemyjClassContextHolder.getInstance().destroy();
  }

  @Override
  public void afterPropertiesSet() throws Exception {
    log.info("---Initialing AlchemyJ class context holder---");
    log.info("AlchemyJ Setting Info: {}", alchemyjProperties);

    AlchemyjClassContextHolder acch = AlchemyjClassContextHolder.getInstance();
    WorkbookExecutorInitPropertyHolder initPropertyHolder = acch.getClassInitPropertyHolder();
    initPropertyHolder.setStopOnFormulaError(alchemyjProperties.isStopOnFormulaError());
    initPropertyHolder.setStopOnUserRaiseError(alchemyjProperties.isStopOnUserRaiseError());
    initPropertyHolder.setThrowOnFormulaError(alchemyjProperties.isThrowOnFormulaError());
    initPropertyHolder.setThrowOnUserRaiseError(alchemyjProperties.isThrowOnUserRaiseError());
    initPropertyHolder.setApplicationPropertiesMap(alchemyjProperties.getApplicationProps());
    initPropertyHolder.setLicenseFileLocation(alchemyjProperties.getLicenseFileLocation());
    initPropertyHolder.setLicenseEvnVariableName(alchemyjProperties.getLicenseEnvVariableName());

    List<String> handleWorkbookNames = new ArrayList<>();
    Map<String, Integer> classLimitMapping = new LinkedHashMap<>();
    alchemyjProperties
        .getClassPoolLimits()
        .forEach(
            (className, limit) -> {
              handleWorkbookNames.add(
                  String.format(Constants.ALCHEMYJ_FILE_PATH_STR_TEMPLATE, className));
              classLimitMapping.put(
                  String.format(Constants.ALCHEMYJ_FILE_PATH_STR_TEMPLATE, className), limit);
            });
    initPropertyHolder.setAlchemyjClassPoolLimitMapping(classLimitMapping);
    acch.setObjectMapper(objectMapper);
    acch.init(handleWorkbookNames);
  }
}
