package my_api.util;
// **********************************************************************
// Code generated by AlchemyJ Compiler.
// PLEASE DO NOT EDIT THIS FILE.
// **********************************************************************

import com.axisoft.alchemyj.execution.common.exception.AlchemyjException;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.JsonGenerator.Feature;
import com.fasterxml.jackson.core.base.GeneratorBase;
import com.fasterxml.jackson.databind.JsonSerializer;
import com.fasterxml.jackson.databind.SerializerProvider;
import java.io.IOException;
import java.lang.reflect.Field;
import java.lang.reflect.Method;
import java.math.BigDecimal;
import org.springframework.boot.jackson.JsonComponent;

@JsonComponent
public class JacksonCustomizedDoubleSerializer extends JsonSerializer<Double> {

  @Override
  public void serialize(Double value, JsonGenerator gen, SerializerProvider serializers)
      throws IOException {
    boolean isGenDoubleToString =
        gen.isEnabled(Feature.WRITE_NUMBERS_AS_STRINGS)
            && ((Double.isNaN(value) || Double.isInfinite(value)));
    String doubleText = new BigDecimal(value.toString()).toPlainString();
    if (gen instanceof GeneratorBase) {
      if (_cfgNumbersAsStrings((GeneratorBase) gen) || isGenDoubleToString) {
        gen.writeString(doubleText);
      }
      _verifyValueWrite((GeneratorBase) gen);
      gen.writeRaw(doubleText);
    } else {
      if (isGenDoubleToString) {
        gen.writeString(doubleText);
      }
      gen.writeRaw(doubleText);
    }
  }

  private boolean _cfgNumbersAsStrings(GeneratorBase generatorBase) {
    String fieldName = "_cfgNumbersAsStrings";
    try {
      Field _cfgNumbersAsStrings =
          generatorBase.getClass().getSuperclass().getSuperclass().getDeclaredField(fieldName);
      _cfgNumbersAsStrings.setAccessible(true);
      return (boolean) _cfgNumbersAsStrings.get(generatorBase);
    } catch (Exception e) {
      throw new AlchemyjException("Fail to read field '" + fieldName + "'", e);
    }
  }

  private void _verifyValueWrite(GeneratorBase generatorBase) {
    String methodName = "_verifyValueWrite";
    try {
      Method _verifyValueWrite =
          generatorBase.getClass().getDeclaredMethod("_verifyValueWrite", String.class);
      _verifyValueWrite.setAccessible(true);
      Field WRITE_NUMBER =
          generatorBase.getClass().getSuperclass().getSuperclass().getDeclaredField("WRITE_NUMBER");
      WRITE_NUMBER.setAccessible(true);
      String wn = (String) WRITE_NUMBER.get(generatorBase);
      _verifyValueWrite.invoke(generatorBase, wn);
    } catch (Exception e) {
      throw new AlchemyjException("Fail to invoke method '" + methodName + "'", e);
    }
  }
}
